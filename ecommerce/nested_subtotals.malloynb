>>>markdown
# Explainer: Nested Subtotals
Malloy great at nested subtotals.  See how Malloy differs from SQL.
>>>malloy
import {order_items} from "ecommerce.malloy"
>>>markdown
### Calculate nested subtotals, one dimension
>>>malloy
run: order_items -> sales_summary_yoy + {
  nest: sales_summary_yoy + {
    group_by: inventory_items.product_department
    order_by: product_department
  }
}
>>>markdown
### Calculate nested subtotals, two dimensions:
>>>malloy
run: order_items -> sales_summary_yoy + {
  nest: sales_summary_yoy + {
    group_by: inventory_items.product_department
    order_by: product_department
    nest: sales_summary_yoy + {
      group_by: inventory_items.product_category
      order_by: sales_growth desc
      limit: 3
    }
  }
}
>>>markdown
### One Dimension in SQL
>>>sql
-- connection: duckdb
WITH sales_by_department AS (
    SELECT
        b.product_department
        , sum(case when date_trunc('year', a.created_at) = '2021-01-01' then a.sale_price else 0 end) as sales_2021
        , sum(case when date_trunc('year', a.created_at) = '2022-01-01' then a.sale_price else 0 end) as sales_2022
    FROM read_parquet('order_items.parquet') a
    LEFT JOIN read_parquet('inventory_items.parquet') b on a.inventory_item_id = b.id
    GROUP BY 1
)
SELECT
    sum(sales_2022) over (partition by 1) as total_sales
    , sum(sales_2022) over (partition by 1) - sum(sales_2021) over (partition by 1) as total_sales_growth
    , sum(sales_2022) over (partition by 1) / sum(sales_2021) over (partition by 1) - 1 as total_sales_yoy
    , '-' as _
    , product_department
    , sales_2022 AS department_sales
    , sales_2022 - sales_2021 as department_sales_growth
    , sales_2022 / sales_2021 - 1 as department_sales_yoy
    , (sales_2022 - sales_2021) / (sum(sales_2022) over (partition by 1) - sum(sales_2021) over (partition by 1)) as department_growth_contribution
FROM sales_by_department
ORDER BY product_department, department_sales_growth DESC
>>>markdown
## Two Dimensions
>>>sql
WITH sales_by_department_and_category AS (
    SELECT
        b.product_department
        , b.product_category
        , sum(case when date_trunc('year', a.created_at) = '2021-01-01' then a.sale_price else 0 end) as sales_2021
        , sum(case when date_trunc('year', a.created_at) = '2022-01-01' then a.sale_price else 0 end) as sales_2022
    FROM read_parquet('order_items.parquet') a
    LEFT JOIN read_parquet('inventory_items.parquet') b on a.inventory_item_id = b.id
    group by 1,2
)
SELECT
    sum(sales_2022) over (partition by 1) as total_sales_2022
    , sum(sales_2022) over (partition by 1) - sum(sales_2021) over (partition by 1) as total_sales_growth
    , sum(sales_2022) over (partition by 1) / sum(sales_2021) over (partition by 1) - 1 as total_sales_yoy
    , '-' as _

    , product_department
    , sum(sales_2022) over (partition by product_department) as department_sales_2022
    , sum(sales_2022) over (partition by product_department) - sum(sales_2021) over (partition by product_department) as department_sales_growth
    , sum(sales_2022) over (partition by product_department) / sum(sales_2021) over (partition by product_department) - 1 as department_sales_yoy
    , (sum(sales_2022) over (partition by product_department) - sum(sales_2021) over (partition by product_department)) /
        (sum(sales_2022) over (partition by 1) - sum(sales_2021) over (partition by 1))
        as department_sales_contribution
    , '-' as __

    , product_category
    , sales_2022 as category_sales_2022
    , sales_2022 - sales_2021 as category_sales_growth
    , sales_2022 / sales_2021 - 1 as category_sales_yoy
    , (sales_2022 - sales_2021) / 
        (sum(sales_2022) over (partition by product_department) - sum(sales_2021) over (partition by product_department))
        as category_sales_contribution
FROM sales_by_department_and_category
ORDER BY product_department, category_sales_growth DESC
>>>markdown
### GROUP BY Rollup with Two Dimensions
>>>sql
WITH rollup_totals AS (
    SELECT
        b.product_department
        , b.product_category
        , SUM(CASE WHEN date_trunc('year', a.created_at) = '2021-01-01' THEN a.sale_price ELSE 0 END) as sales_2021
        , SUM(CASE WHEN date_trunc('year', a.created_at) = '2022-01-01' THEN a.sale_price ELSE 0 END) as sales_2022
    FROM read_parquet('order_items.parquet') a
    LEFT JOIN read_parquet('inventory_items.parquet') b on a.inventory_item_id = b.id
    GROUP BY ROLLUP (1,2)
)
SELECT
    product_department
    , product_category
    , sales_2022
    , sales_2022 - sales_2021 AS sales_growth
    , sales_2022 / sales_2021 - 1 AS sales_yoy
    , (sales_2022 - sales_2021) / 
        CASE WHEN product_department IS NULL THEN NULL
        WHEN product_category IS NULL THEN 
            SUM(CASE WHEN product_department IS NULL THEN sales_2022 - sales_2021 ELSE 0 END) OVER (PARTITION BY 1) 
        WHEN product_category IS NOT NULL THEN
            SUM(CASE WHEN product_category IS NULL THEN sales_2022 - sales_2021 ELSE 0 END) OVER (PARTITION BY product_department) 
        ELSE NULL END
        AS growth_contribution
FROM rollup_totals
ORDER BY 1,4 DESC