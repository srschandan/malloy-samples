>>>markdown
## Composing with Queries
We can add 'views' to our semantic model that are reusable. As we've seen earlier, the most interesting ways to look at this dataset are by `name`, time and location.  We declare `view`s for looking at this data in those ways.

Clicking 'Run Query' above the view will run the query for you and show you the results.
>>>malloy
source: names2 is duckdb.table('usa_names.parquet') extend {
  rename: year_born is `year`   // 'year' is a malloy reserved word
  rename: population is `number`  // 'number' is a malloy reserve word.

  measure:
    total_population is population.sum()

  dimension: 
    decade is floor(year_born/10)*10

  view: top_names is {
    group_by: name
    aggregate: total_population
    limit: 6
  }

  view: by_decade is {
    group_by: decade
    aggregate: total_population
    order_by: decade
  }

  view: by_state is {
    group_by: state
    aggregate: total_population
  }
}
>>>markdown
## Running queries
In malloy a query is expressed as `run: source -> view`.  In the [first section](names1.malloynb) all the queries were expressed literally with `{group_by ...}` but we can also just use a view named in the source.
>>>malloy
run: names2 -> top_names
>>>markdown
## Views can be refined (we can change them)
We can, for example change the limit and add a filter.  Let's look at top 4 names in the 2000 decade that start with the letter 'S'
>>>malloy
run: names2 -> top_names + {
  limit: 4
  where: decade = 2000 and name ~ 'S%'
}
>>>markdown
## Combining Views
In the [first section](names1.malloynb) we saw how nested queries work.  
By combining two queries. we can see the top names in each decade.
>>>malloy
run: names2 -> by_decade + {
  nest: top_names
  order_by: decade desc
}
>>>markdown
## Fliping around the order 
Fliping around the order shows us popularity by decade for each of the names.
>>>malloy
run: names2 -> top_names +{ 
  # line_chart
  nest: by_decade
  # shape_map
  nest: by_state
}
>>>markdown
## Both Male and Female names.
We can refine views with a  `where:` clause and use it multiple times in the same query.
>>>malloy

run: names2 -> by_decade + {
  nest: top_male is top_names + {where: gender='M'}
  nest: female_male is top_names + {where: gender='F'}
  order_by: decade desc
}